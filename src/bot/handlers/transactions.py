import datetime as dt
from decimal import Decimal, InvalidOperation

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards import get_items_for_action_keyboard
from src.bot.states import AddTransaction, MakeTransfer
from src.db.repo_holder import RepoHolder

router = Router()


@router.message((F.text == "üìà –†–∞—Å—Ö–æ–¥") | (F.text == "üí∞ –î–æ—Ö–æ–¥"))
async def add_transaction_start(message: Message, state: FSMContext):
    trans_type = "expense" if message.text == "üìà –†–∞—Å—Ö–æ–¥" else "income"
    await state.update_data(trans_type=trans_type)
    await state.set_state(AddTransaction.choosing_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")


@router.message(AddTransaction.choosing_amount)
async def add_transaction_amount_chosen(message: Message, state: FSMContext, repo: RepoHolder):
    try:
        amount = Decimal(message.text.replace(",", "."))
    except InvalidOperation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)
    data = await state.get_data()
    trans_type = data.get("trans_type")

    all_categories = await repo.category.get_all_active()
    filtered_categories = [cat for cat in all_categories if cat.type == trans_type]

    await state.set_state(AddTransaction.choosing_category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_items_for_action_keyboard(filtered_categories, "select", "category"),
    )


@router.callback_query(AddTransaction.choosing_category, F.data.startswith("select:category:"))
async def add_transaction_category_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    category_id = int(callback.data.split(":")[-1])
    await state.update_data(category_id=category_id)

    user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
    envelopes = await repo.envelope.get_by_owner_id(user.id)

    await state.set_state(AddTransaction.choosing_envelope)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç:", reply_markup=get_items_for_action_keyboard(envelopes, "select", "envelope")
    )


@router.callback_query(AddTransaction.choosing_envelope, F.data.startswith("select:envelope:"))
async def add_transaction_envelope_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    envelope_id = int(callback.data.split(":")[-1])
    data = await state.get_data()
    trans_type = data.get("trans_type")
    amount = data.get("amount")
    category_id = data.get("category_id")

    user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
    envelope = await repo.envelope.get_by_id(envelope_id)

    if not envelope:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω–≤–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if trans_type == "expense" and envelope.balance < amount:
        current_balance = f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {envelope.balance:.2f} ‚ÇΩ."
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ ¬´{envelope.name}¬ª.\n{current_balance}", parse_mode="Markdown"
        )
        await state.clear()
        return

    await repo.transaction.create(
        user_id=user.id,
        category_id=category_id,
        envelope_id=envelope_id,
        amount=amount,
        transaction_date=dt.date.today(),
    )

    new_balance = envelope.balance - amount if trans_type == "expense" else envelope.balance + amount
    await repo.envelope.update(envelope, balance=new_balance)

    await state.clear()
    await callback.message.edit_text("‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


@router.message(F.text == "üìã –ü–µ—Ä–µ–≤–æ–¥")
async def make_transfer_start(message: Message, state: FSMContext):
    await state.set_state(MakeTransfer.choosing_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")


@router.message(MakeTransfer.choosing_amount)
async def make_transfer_amount_chosen(message: Message, state: FSMContext, repo: RepoHolder):
    try:
        amount = Decimal(message.text.replace(",", "."))
    except InvalidOperation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)
    user = await repo.user.get_or_create(message.from_user.id, message.from_user.username)
    envelopes = await repo.envelope.get_by_owner_id(user.id)
    sufficient_balance_envelopes = [env for env in envelopes if env.balance >= amount]

    if not sufficient_balance_envelopes:
        await message.answer(f"‚ùå –ù–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –≤–∞—à–∏—Ö –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å—É–º–º—ã ({amount:.2f} ‚ÇΩ) –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        await state.clear()
        return

    await state.set_state(MakeTransfer.choosing_envelope_from)
    await message.answer(
        "–° –∫–∞–∫–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?",
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –ö–õ–ê–í–ò–ê–¢–£–†–£
        reply_markup=get_items_for_action_keyboard(sufficient_balance_envelopes, "from", "envelope"),
    )


@router.callback_query(MakeTransfer.choosing_envelope_from, F.data.startswith("from:envelope:"))
async def make_transfer_from_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    envelope_from_id = int(callback.data.split(":")[-1])
    await state.update_data(envelope_from_id=envelope_from_id)

    user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
    envelopes = await repo.envelope.get_by_owner_id(user.id)
    filtered_envelopes = [env for env in envelopes if env.id != envelope_from_id]

    await state.set_state(MakeTransfer.choosing_envelope_to)
    await callback.message.edit_text(
        "–ù–∞ –∫–∞–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?",
        reply_markup=get_items_for_action_keyboard(filtered_envelopes, "to", "envelope"),
    )


@router.callback_query(MakeTransfer.choosing_envelope_to, F.data.startswith("to:envelope:"))
async def make_transfer_to_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    envelope_to_id = int(callback.data.split(":")[-1])
    data = await state.get_data()
    amount = data.get("amount")
    envelope_from_id = data.get("envelope_from_id")

    env_from = await repo.envelope.get_by_id(envelope_from_id)
    env_to = await repo.envelope.get_by_id(envelope_to_id)

    if not env_from or not env_to:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await repo.transfer.create(from_envelope_id=env_from.id, to_envelope_id=env_to.id, amount=amount)
    await repo.envelope.update(env_from, balance=env_from.balance - amount)
    await repo.envelope.update(env_to, balance=env_to.balance + amount)

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:.2f} ‚ÇΩ —Å ¬´{env_from.name}¬ª –Ω–∞ ¬´{env_to.name}¬ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    )
