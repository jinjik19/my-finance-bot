from decimal import Decimal, InvalidOperation

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import async_sessionmaker

from src.bot.keyboards import get_edit_phase_keyboard, get_items_for_action_keyboard, get_phases_keyboard
from src.bot.states import AddPhase, EditPhase
from src.db.repo_holder import RepoHolder
from src.services.scheduler import reload_scheduler_jobs

router = Router()


@router.callback_query(F.data == "list_phases")
async def list_phases(callback: CallbackQuery, repo: RepoHolder):
    system_state = await repo.state.get_by_id(1)
    all_phases = await repo.phase.get_all_active()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ñ–∞–∑—É (–æ—Ç–º–µ—á–µ–Ω–∞ ‚úÖ):",
        reply_markup=get_phases_keyboard(all_phases, system_state.current_phase_id if system_state else None),
    )


@router.callback_query(F.data.startswith("set_phase:"))
async def set_user_phase(callback: CallbackQuery, repo: RepoHolder, bot: Bot, session_pool: async_sessionmaker):
    phase_id = int(callback.data.split(":")[1])
    system_state = await repo.state.get_by_id(1)

    if not system_state:
        await repo.state.create(id=1, current_phase_id=phase_id)
        await reload_scheduler_jobs(bot, session_pool)
        await callback.answer("‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.", show_alert=True)
        await list_phases(callback, repo)
        return

    old_phase_id = system_state.current_phase_id

    if old_phase_id == phase_id:
        await callback.answer("–≠—Ç–∞ —Ñ–∞–∑–∞ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.")
        return

    old_goal = await repo.goal.get_by_phase_id(old_phase_id)
    new_goal = await repo.goal.get_by_phase_id(phase_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ–±–µ–∏—Ö —Ñ–∞–∑ –µ—Å—Ç—å —Ü–µ–ª–∏ –∏ –æ–Ω–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ–¥–Ω–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç—É
    if old_goal and new_goal and old_goal.linked_envelope_id == new_goal.linked_envelope_id:
        envelope = await repo.envelope.get_by_id(old_goal.linked_envelope_id)

        # –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        surplus = envelope.balance - old_goal.target_amount

        if surplus < 0:
            surplus = Decimal(0) # –ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –¥–æ–ª–≥

        # 1. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–ª—å
        await repo.goal.update(old_goal, status='archived')

        # 2. –°–æ–∑–¥–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π" –ø–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞—Ç–∫–∞
        # –ú—ã –Ω–µ –º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å, –∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–≤–æ–¥–µ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –µ–µ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
        if surplus > 0:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π "–°–∏—Å—Ç–µ–º–Ω—ã–π" –∫–æ–Ω–≤–µ—Ä—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            system_envelope = await repo.envelope.get_by_name("System")

            if not system_envelope:
                system_envelope = await repo.envelope.create(name="System", is_active=False)

            await repo.transfer.create(
                from_envelope_id=system_envelope.id,
                to_envelope_id=new_goal.linked_envelope_id,
                amount=surplus
            )
            await callback.message.answer(
                f"üéâ –§–∞–∑–∞ ¬´{old_goal.name}¬ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ `{surplus:.2f} ‚ÇΩ` –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –Ω–æ–≤—É—é —Ü–µ–ª—å ¬´{new_goal.name}¬ª."
            )

    # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ–∞–∑—É
    await repo.state.update(system_state, current_phase_id=phase_id)

    # 4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await reload_scheduler_jobs(bot, session_pool)

    new_phase = await repo.phase.get_by_id(phase_id)
    await callback.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ–∞–∑–∞: {new_phase.name}. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", show_alert=True)
    await list_phases(callback, repo)


@router.callback_query(F.data == "add_phase")
async def add_phase_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddPhase.choosing_name)
    await state.update_data(_original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∞–∑—ã:")
    await callback.answer()


@router.message(AddPhase.choosing_name)
async def add_phase_name_chosen(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(name=message.text)
    await state.set_state(AddPhase.choosing_monthly_target)
    data = await state.get_data()

    if data.get("_original_message_id"):
        await bot.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –ø–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º –¥–ª—è —ç—Ç–æ–π —Ñ–∞–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75000):",
            chat_id=message.chat.id,
            message_id=data.get("_original_message_id"),
        )


@router.message(AddPhase.choosing_monthly_target)
async def add_phase_target_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    try:
        monthly_target = Decimal(message.text.replace(",", "."))
    except InvalidOperation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    await repo.phase.create(name=data.get("name"), monthly_target=monthly_target)
    await state.clear()

    if data.get("_original_message_id"):
        await bot.edit_message_text(
            f"‚úÖ –ù–æ–≤–∞—è —Ñ–∞–∑–∞ ¬´{data.get('name')}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            chat_id=message.chat.id,
            message_id=data.get("_original_message_id"),
        )


@router.callback_query(F.data == "edit_phase_menu")
async def edit_phase_menu(callback: CallbackQuery, repo: RepoHolder):
    phases = await repo.phase.get_all_active()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_items_for_action_keyboard(phases, "edit", "phase"),
    )


@router.callback_query(F.data.startswith("edit:phase:"))
async def edit_phase_start(callback: CallbackQuery):
    phase_id = int(callback.data.split(":")[2])
    await callback.message.edit_text(
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–π —Ñ–∞–∑–µ?", reply_markup=get_edit_phase_keyboard(phase_id)
    )


@router.callback_query(F.data.startswith("edit_phase_name:"))
async def edit_phase_name_start(callback: CallbackQuery, state: FSMContext):
    phase_id = int(callback.data.split(":")[1])
    await state.set_state(EditPhase.waiting_for_new_name)
    await state.update_data(phase_id=phase_id, _original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã:")


@router.message(EditPhase.waiting_for_new_name)
async def edit_phase_name_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):

    data = await state.get_data()
    phase = await repo.phase.get_by_id(data.get("phase_id"))

    if phase:
        await repo.phase.update(phase, name=message.text)

        if data.get("_original_message_id"):
            await bot.edit_message_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∑—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{message.text}¬ª.",
                chat_id=message.chat.id,
                message_id=data.get("_original_message_id"),
            )

    await state.clear()


@router.callback_query(F.data.startswith("edit_phase_target:"))
async def edit_phase_target_start(callback: CallbackQuery, state: FSMContext):
    phase_id = int(callback.data.split(":")[1])
    await state.set_state(EditPhase.waiting_for_new_target)
    await state.update_data(phase_id=phase_id, _original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π:")


@router.message(EditPhase.waiting_for_new_target)
async def edit_phase_target_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    try:
        monthly_target = Decimal(message.text.replace(",", "."))
    except InvalidOperation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    phase = await repo.phase.get_by_id(data.get("phase_id"))

    if phase:
        await repo.phase.update(phase, monthly_target=monthly_target)

        if data.get("_original_message_id"):
            await bot.edit_message_text(
                f"‚úÖ –ú–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å –¥–ª—è —Ñ–∞–∑—ã ¬´{phase.name}¬ª –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {monthly_target:.2f} ‚ÇΩ.",
                chat_id=message.chat.id,
                message_id=data.get("_original_message_id"),
            )
    await state.clear()


@router.callback_query(F.data == "archive_phase_menu")
async def archive_phase_menu(callback: CallbackQuery, repo: RepoHolder):
    phases = await repo.phase.get_all_active()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∑—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:",
        reply_markup=get_items_for_action_keyboard(phases, "archive", "phase"),
    )


@router.callback_query(F.data.startswith("archive:phase:"))
async def archive_phase(callback: CallbackQuery, repo: RepoHolder):
    phase_id = int(callback.data.split(":")[2])
    phase = await repo.phase.get_by_id(phase_id)

    if not phase:
        return await callback.answer("–§–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    system_state = await repo.state.get_by_id(1)

    if system_state and system_state.current_phase_id == phase.id:
        await callback.answer("–ù–µ–ª—å–∑—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É!", show_alert=True)
        return

    await repo.phase.update(phase, is_active=False)
    await callback.message.edit_text(f"‚úÖ –§–∞–∑–∞ ¬´{phase.name}¬ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
    await callback.answer()
