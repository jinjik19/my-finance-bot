from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards import get_edit_envelope_keyboard, get_items_for_action_keyboard
from src.bot.states import AddEnvelope, ArchiveTransfer, EditEnvelope
from src.db.repo_holder import RepoHolder

router = Router()


@router.callback_query(F.data == "list_envelopes")
async def list_envelopes(callback: CallbackQuery, repo: RepoHolder):
    user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
    envelopes = await repo.envelope.get_all_active(user.id)

    if not envelopes:
        await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤.", show_alert=True)
        return

    response_text = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–≤–µ—Ä—Ç—ã:\n\n"

    for env in envelopes:
        savings_icon = "üéØ" if env.is_savings else "üóÇÔ∏è"
        response_text += f"{savings_icon} ¬´{env.name}¬ª:  `{env.balance:.2f} ‚ÇΩ`\n"

    await callback.message.edit_text(response_text, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "add_envelope")
async def add_envelope_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddEnvelope.choosing_name)
    await state.update_data(_original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞:")
    await callback.answer()


@router.callback_query(F.data == "edit_envelope_menu")
async def edit_envelope_menu(callback: CallbackQuery, repo: RepoHolder):
    user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
    envelopes = await repo.envelope.get_all_active(user.id)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_items_for_action_keyboard(envelopes, "edit", "envelope"),
    )


@router.callback_query(F.data.startswith("edit:envelope:"))
async def edit_envelope_start(callback: CallbackQuery, repo: RepoHolder):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞."""
    envelope_id = int(callback.data.split(":")[2])
    envelope = await repo.envelope.get_by_id(envelope_id)

    if not envelope:
        return await callback.answer("–ö–æ–Ω–≤–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞ ¬´{envelope.name}¬ª:",
        reply_markup=get_edit_envelope_keyboard(envelope.id, envelope.is_savings),
    )


@router.callback_query(F.data.startswith("edit_envelope_name:"))
async def edit_envelope_name_start(callback: CallbackQuery, state: FSMContext):
    envelope_id = int(callback.data.split(":")[1])
    await state.set_state(EditEnvelope.waiting_for_new_name)
    await state.update_data(envelope_id=envelope_id, _original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞:")


@router.message(EditEnvelope.waiting_for_new_name)
async def edit_envelope_name_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    await message.delete()
    data = await state.get_data()
    envelope = await repo.envelope.get_by_id(data.get("envelope_id"))

    if envelope:
        await repo.envelope.update(envelope, name=message.text)

        if data.get("_original_message_id"):
            await bot.edit_message_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{message.text}¬ª.",
                chat_id=message.chat.id,
                message_id=data.get("_original_message_id"),
            )

    await state.clear()


@router.callback_query(F.data.startswith("toggle_savings:envelope:"))
async def toggle_savings_envelope(callback: CallbackQuery, repo: RepoHolder):
    envelope_id = int(callback.data.split(":")[2])
    envelope = await repo.envelope.get_by_id(envelope_id)

    if envelope:
        new_status = not envelope.is_savings
        await repo.envelope.update(envelope, is_savings=new_status)
        status_text = "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º" if new_status else "–æ–±—ã—á–Ω—ã–º"
        await callback.answer(f"–ö–æ–Ω–≤–µ—Ä—Ç ¬´{envelope.name}¬ª —Ç–µ–ø–µ—Ä—å {status_text}.", show_alert=True)
        await callback.message.edit_reply_markup(reply_markup=get_edit_envelope_keyboard(envelope.id, new_status))
    else:
        await callback.answer("–ö–æ–Ω–≤–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)


@router.message(AddEnvelope.choosing_name)
async def add_envelope_name_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    await message.delete()
    data = await state.get_data()
    original_message_id = data.get("_original_message_id")

    user = await repo.user.get_or_create(message.from_user.id, message.from_user.username)
    await repo.envelope.create(name=message.text, owner_id=user.id)

    await state.clear()

    if original_message_id:
        await bot.edit_message_text(
            text=f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç ¬´{message.text}¬ª —Å–æ–∑–¥–∞–Ω.", chat_id=message.chat.id, message_id=original_message_id
        )


@router.callback_query(F.data.startswith("archive:envelope:"))
async def archive_envelope(callback: CallbackQuery, repo: RepoHolder, state: FSMContext):
    envelope_id = int(callback.data.split(":")[2])
    envelope = await repo.envelope.get_by_id(envelope_id)

    if not envelope:
        await callback.answer("–ö–æ–Ω–≤–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if envelope.balance > 0:
        await state.set_state(ArchiveTransfer.choosing_envelope_to)
        await state.update_data(from_envelope_id=envelope.id, amount=envelope.balance)

        user = await repo.user.get_or_create(callback.from_user.id, callback.from_user.username)
        all_envelopes = await repo.envelope.get_all_active(user.id)
        other_envelopes = [env for env in all_envelopes if env.id != envelope.id]

        await callback.message.edit_text(
            f"–ù–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ ¬´{envelope.name}¬ª –æ—Å—Ç–∞–ª–æ—Å—å {envelope.balance:.2f} ‚ÇΩ. "
            "–ù–µ–ª—å–∑—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Å—Ç–∞—Ç–æ–∫:",
            reply_markup=get_items_for_action_keyboard(other_envelopes, "archive_transfer_to", "envelope"),
        )
    else:
        await repo.envelope.update(envelope, is_active=False)
        await callback.message.edit_text(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç ¬´{envelope.name}¬ª —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")

    await callback.answer()


@router.callback_query(ArchiveTransfer.choosing_envelope_to, F.data.startswith("archive_transfer_to:envelope:"))
async def archive_transfer_to_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞—Ç–∫–∞ –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç."""
    to_envelope_id = int(callback.data.split(":")[2])
    data = await state.get_data()
    from_envelope_id = data.get("from_envelope_id")
    amount = data.get("amount")

    env_from = await repo.envelope.get_by_id(from_envelope_id)
    env_to = await repo.envelope.get_by_id(to_envelope_id)

    if not env_from or not env_to:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ–¥–∏–Ω –∏–∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await repo.transfer.create(from_envelope_id=env_from.id, to_envelope_id=env_to.id, amount=amount)
    await repo.envelope.update(env_from, balance=0, is_active=False)
    await repo.envelope.update(env_to, balance=env_to.balance + amount)

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫ {amount:.2f} ‚ÇΩ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ ¬´{env_to.name}¬ª.\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç ¬´{env_from.name}¬ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω."
    )
    await callback.answer()


@router.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_my_balance(message: Message, repo: RepoHolder):
    user = await repo.user.get_or_create(message.from_user.id, message.from_user.username)
    income_envelope = await repo.envelope.get_by_owner_id(user.id)

    if not income_envelope:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–æ—Ö–æ–¥–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await message.answer(
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –≤–∞—à–µ–º –¥–æ—Ö–æ–¥–Ω–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ ¬´{income_envelope.name}¬ª: `{income_envelope.balance:.2f} ‚ÇΩ`",
        parse_mode="Markdown"
    )
