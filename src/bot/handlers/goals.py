from decimal import Decimal, InvalidOperation

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards import get_items_for_action_keyboard
from src.bot.states import AddGoal, EditGoal
from src.db.repo_holder import RepoHolder

router = Router()


@router.callback_query(F.data == "list_goals")
async def list_goals(callback: CallbackQuery, repo: RepoHolder):
    system_state = await repo.state.get_by_id(1)

    if not system_state or not system_state.current_phase_id:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É –≤ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' -> '–§–∞–∑—ã'.", show_alert=True)
        return

    goals = await repo.goal.get_all_by_phase_id(system_state.current_phase_id)

    if not goals:
        await callback.answer("–î–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π.", show_alert=True)
        return

    response_text = "–¶–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã:\n"

    for goal in goals:
        envelope = await repo.envelope.get_by_id(goal.linked_envelope_id)
        phase = await repo.phase.get_by_id(goal.phase_id)

        if not envelope or not phase:
            continue

        progress = (envelope.balance / goal.target_amount * 100) if goal.target_amount > 0 else Decimal(0)

        response_text += (
            f"\nüéØ ¬´{goal.name}¬ª (–§–∞–∑–∞: {phase.name})\n"
            f"   - –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
            f"   - –°–æ–±—Ä–∞–Ω–æ: `{envelope.balance:.2f}` –∏–∑ `{goal.target_amount:.2f} ‚ÇΩ`"
        )

    await callback.message.edit_text(response_text, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "add_goal")
async def add_goal_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddGoal.choosing_name)
    await state.update_data(_original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏:")
    await callback.answer()


@router.message(AddGoal.choosing_name)
async def add_goal_name_chosen(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(name=message.text)
    await state.set_state(AddGoal.choosing_target_amount)
    data = await state.get_data()
    if data.get("_original_message_id"):
        await bot.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150000):",
            chat_id=message.chat.id,
            message_id=data.get("_original_message_id"),
        )


@router.message(AddGoal.choosing_target_amount)
async def add_goal_amount_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    try:
        target_amount = Decimal(message.text.replace(",", "."))
    except InvalidOperation:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.update_data(target_amount=target_amount)

    user = await repo.user.get_or_create(message.from_user.id, message.from_user.username)
    envelopes = await repo.envelope.get_all_active(user.id)
    await state.set_state(AddGoal.choosing_envelope)
    data = await state.get_data()

    if data.get("_original_message_id"):
        await bot.edit_message_text(
            "–ö –∫–∞–∫–æ–º—É –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç—É –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç—É —Ü–µ–ª—å?",
            chat_id=message.chat.id,
            message_id=data.get("_original_message_id"),
            reply_markup=get_items_for_action_keyboard(
                [e for e in envelopes if e.is_savings], "select_goal_env", "envelope"
            ),
        )


@router.callback_query(AddGoal.choosing_envelope, F.data.startswith("select_goal_env:envelope:"))
async def add_goal_envelope_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    envelope_id = int(callback.data.split(":")[-1])
    await state.update_data(linked_envelope_id=envelope_id)

    phases = await repo.phase.get_all_active()
    await state.set_state(AddGoal.choosing_phase)
    await callback.message.edit_text(
        "–ö –∫–∞–∫–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ñ–∞–∑–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ —Ü–µ–ª—å?",
        reply_markup=get_items_for_action_keyboard(phases, "select_goal_phase", "phase"),
    )


@router.callback_query(AddGoal.choosing_phase, F.data.startswith("select_goal_phase:phase:"))
async def add_goal_phase_chosen(callback: CallbackQuery, state: FSMContext, repo: RepoHolder):
    phase_id = int(callback.data.split(":")[-1])
    data = await state.get_data()

    await repo.goal.create(
        name=data.get("name"),
        target_amount=data.get("target_amount"),
        linked_envelope_id=data.get("linked_envelope_id"),
        phase_id=phase_id,
    )
    await state.clear()
    await callback.message.edit_text(f"‚úÖ –¶–µ–ª—å ¬´{data.get('name')}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await callback.answer()


@router.callback_query(F.data == "edit_goal_menu")
async def edit_goal_menu(callback: CallbackQuery, repo: RepoHolder):
    goals = await repo.goal.get_all_active()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_items_for_action_keyboard(goals, "edit", "goal"),
    )


@router.callback_query(F.data.startswith("edit:goal:"))
async def edit_goal_start(callback: CallbackQuery, state: FSMContext):
    goal_id = int(callback.data.split(":")[2])
    await state.set_state(EditGoal.waiting_for_new_name)  # –ù–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏
    await state.update_data(goal_id=goal_id, _original_message_id=callback.message.message_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ü–µ–ª–∏:")
    await callback.answer()


@router.message(EditGoal.waiting_for_new_name)
async def edit_goal_name_chosen(message: Message, state: FSMContext, repo: RepoHolder, bot: Bot):
    data = await state.get_data()
    goal = await repo.goal.get_by_id(data.get("goal_id"))
    if goal:
        await repo.goal.update(goal, name=message.text)
        if data.get("_original_message_id"):
            await bot.edit_message_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ¬´{message.text}¬ª.",
                chat_id=message.chat.id,
                message_id=data.get("_original_message_id"),
            )
    await state.clear()


@router.callback_query(F.data == "archive_goal_menu")
async def archive_goal_menu(callback: CallbackQuery, repo: RepoHolder):
    goals = await repo.goal.get_all_active()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:",
        reply_markup=get_items_for_action_keyboard(goals, "archive", "goal"),
    )


@router.callback_query(F.data.startswith("archive:goal:"))
async def archive_goal(callback: CallbackQuery, repo: RepoHolder):
    goal_id = int(callback.data.split(":")[2])
    goal = await repo.goal.get_by_id(goal_id)

    if goal:
        await repo.goal.update(goal, status="archived")
        await callback.message.edit_text(f"‚úÖ –¶–µ–ª—å ¬´{goal.name}¬ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

    await callback.answer()
