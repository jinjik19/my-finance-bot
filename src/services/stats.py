import datetime as dt
from collections import defaultdict
from decimal import Decimal

import pytz

from src.core.settings import settings
from src.db.models.user import User
from src.db.repo_holder import RepoHolder

RU_MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å",
    "–§–µ–≤—Ä–∞–ª—å",
    "–ú–∞—Ä—Ç",
    "–ê–ø—Ä–µ–ª—å",
    "–ú–∞–π",
    "–ò—é–Ω—å",
    "–ò—é–ª—å",
    "–ê–≤–≥—É—Å—Ç",
    "–°–µ–Ω—Ç—è–±—Ä—å",
    "–û–∫—Ç—è–±—Ä—å",
    "–ù–æ—è–±—Ä—å",
    "–î–µ–∫–∞–±—Ä—å",
]


def _get_date_range(user_timezone: str) -> tuple[dt.date, dt.datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –≤ —Ç–∞–π–º–∑–æ–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    timezone = pytz.timezone(user_timezone)
    today = dt.datetime.now(tz=timezone).date()
    start_of_month = today.replace(day=1)
    end_of_today = dt.datetime.combine(today, dt.time.max)
    return start_of_month, end_of_today


async def _calculate_user_specific_balance(repo: RepoHolder, user: User, start_date: dt.date, end_date: dt.datetime) -> dict | None:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫, –Ω–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    income_envelope = await repo.envelope.get_by_owner_id(user.id)

    if not income_envelope:
        return None

    # 1. –°—á–∏—Ç–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (–¥–æ—Ö–æ–¥—ã/–ø–µ—Ä–µ–≤–æ–¥—ã) –≤ –¥–æ—Ö–æ–¥–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    income_transactions_this_month = await repo.transaction.get_income_for_envelope_and_period(
        income_envelope.id, start_date, end_date
    )
    transfers_to_income_this_month = await repo.transfer.get_to_envelope_for_period(
        income_envelope.id, start_date, end_date
    )
    total_income_this_month = (
        sum(t.amount for t in income_transactions_this_month)
        + sum(t.amount for t in transfers_to_income_this_month)
    )

    # 2. –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä–∞—Å—Ö–æ–¥—ã/–ø–µ—Ä–µ–≤–æ–¥—ã) –∏–∑ –¥–æ—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    expense_transactions_this_month = await repo.transaction.get_expense_for_envelope_and_period(
        income_envelope.id, start_date, end_date
    )
    transfers_from_income_this_month = await repo.transfer.get_from_envelope_for_period(
        income_envelope.id, start_date, end_date
    )
    total_expense_this_month = (
        sum(t.amount for t in expense_transactions_this_month)
        + sum(t.amount for t in transfers_from_income_this_month)
    )

    # 3. –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ (–û—Å—Ç–∞—Ç–æ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞)
    balance_at_start_of_month = income_envelope.balance - (total_income_this_month - total_expense_this_month)

    # –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ–Ω–¥ = –û—Å—Ç–∞—Ç–æ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ + –î–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    total_available = balance_at_start_of_month + total_income_this_month

    return {
        "balance_at_start_of_month": balance_at_start_of_month,
        "total_income_this_month": total_income_this_month,
        "total_expense_this_month": total_expense_this_month,
        "total_available": total_available,
        "current_balance": income_envelope.balance,
        "envelope_name": income_envelope.name
    }


async def _calculate_total_stats(repo: RepoHolder, start_date: dt.date, end_date: dt.datetime) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    user_ids = settings.allowed_telegram_ids
    users = [await repo.user.get_by_telegram_id(uid) for uid in user_ids]

    all_transactions = await repo.transaction.get_all_for_period(start_date, end_date)

    total_income = Decimal(0)
    total_expense = Decimal(0)
    expenses_by_user = defaultdict(Decimal)

    # –°—É–º–º–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã –∏–∑ transactions
    for t in all_transactions:
        category = await repo.category.get_by_id(t.category_id)
        if category.type == "income":
            total_income += t.amount
        else:
            total_expense += t.amount
            expenses_by_user[t.user_id] += t.amount

    savings_transfers = await repo.transfer.get_all_savings_for_period(start_date, end_date)
    total_savings = sum(t.amount for t in savings_transfers)

    return {
        "total_income": total_income,
        "total_expense": total_expense,
        "total_savings": total_savings,
        "expenses_by_user": expenses_by_user,
        "users": users
    }


async def prepare_current_month_report(repo: RepoHolder, user: User) -> str:
    """–ì–æ—Ç–æ–≤–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""
    start_of_month, end_of_today = _get_date_range(user.timezone)
    today = dt.datetime.now(tz=pytz.timezone(user.timezone)).date()
    user_balance_data = await _calculate_user_specific_balance(repo, user, start_of_month, end_of_today)
    total_stats = await _calculate_total_stats(repo, start_of_month, end_of_today)

    month_name = RU_MONTHS[start_of_month.month - 1]

    report_title = f"–û—Ç—á–µ—Ç –∑–∞ {month_name} {today.year}"
    report_lines = [
        f"üìä **{report_title}**\n",
        f"---",
        f"**–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã ({user.username}):**",
    ]

    if user_balance_data:
        report_lines.extend([
            f"üí∞ **–ù–æ–≤—ã–µ –¥–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:** `{user_balance_data['total_income_this_month']:.2f} ‚ÇΩ`",
            f"üóÇÔ∏è **–û—Å—Ç–∞—Ç–æ–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞:** `{user_balance_data['balance_at_start_of_month']:.2f} ‚ÇΩ`",
            f"üíµ **–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ:** `{user_balance_data['total_available']:.2f} ‚ÇΩ`",
            f"üìà **–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:** `{user_balance_data['total_expense_this_month']:.2f} ‚ÇΩ`",
            f"‚úÖ **–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –≤–∞—à–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ:** `{user_balance_data['current_balance']:.2f} ‚ÇΩ`\n",
        ])
    else:
        report_lines.append("‚ùå –û—à–∏–±–∫–∞: –¥–æ—Ö–æ–¥–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç –¥–ª—è –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n")

    report_lines.extend([
        "---",
        "**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: `{total_stats['total_income']:.2f} ‚ÇΩ`",
        f"üìà –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: `{total_stats['total_expense']:.2f} ‚ÇΩ`",
        f"üéØ –û—Ç–ª–æ–∂–µ–Ω–æ: `{total_stats['total_savings']:.2f} ‚ÇΩ`\n",
        "**–†–∞—Å—Ö–æ–¥—ã –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º:**",
    ])

    for u in total_stats['users']:
        report_lines.append(
            f" ‚Ä¢ {u.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: `{total_stats['expenses_by_user'].get(u.id, 0):.2f} ‚ÇΩ`"
        )


    return "\n".join(report_lines)
