import calendar
import datetime as dt
import logging
from decimal import Decimal

import pytz
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine
from workalendar.europe import Russia

from src.core.settings import settings
from src.db.models.scheduled_task import ScheduledTask
from src.db.repo_holder import RepoHolder

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

national_calendar = Russia()
# –î–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –ù–ê–ó–ê–î –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
DAYS_TO_MOVE_BACK = {5, 20}
# –î–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –í–ü–ï–†–Å–î –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
DAYS_TO_MOVE_FORWARD = {10, 25}


def is_weekend(date_obj: dt.date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã–º (—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)."""
    return date_obj.weekday() >= calendar.SATURDAY


def is_holiday(date_obj: dt.date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º."""
    return national_calendar.is_holiday(date_obj)


def find_nearest_workday(original_date: dt.date, move_forward: bool) -> dt.date:
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –¥–≤–∏–≥–∞—è—Å—å –≤–ø–µ—Ä–µ–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥."""
    current_date = original_date

    while is_weekend(current_date) or is_holiday(current_date):
        if move_forward:
            current_date += dt.timedelta(days=1)
        else:
            current_date -= dt.timedelta(days=1)

    return current_date


def get_corrected_day(original_day_of_month: int, task: ScheduledTask, tz: str) -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω—è"""
    now = dt.datetime.now(tz=tz) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    target_date_this_month = dt.date(now.year, now.month, original_day_of_month)

    if original_day_of_month in DAYS_TO_MOVE_BACK:
        # –ï—Å–ª–∏ –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ù–ê–ó–ê–î
        if is_weekend(target_date_this_month):
            corrected_date = find_nearest_workday(target_date_this_month, move_forward=False)
            corrected_day = corrected_date.day
            logging.info(
                f"–ó–∞–¥–∞—á–∞ (ID:{task.id}) –Ω–∞ {original_day_of_month} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –ù–ê–ó–ê–î –Ω–∞ {corrected_day} –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ."
            )
    elif original_day_of_month in DAYS_TO_MOVE_FORWARD:
        # –ï—Å–ª–∏ –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –í–ü–ï–†–Å–î
        if is_weekend(target_date_this_month):
            corrected_date = find_nearest_workday(target_date_this_month, move_forward=True)
            corrected_day = corrected_date.day
            logging.info(
                f"–ó–∞–¥–∞—á–∞ (ID:{task.id}) –Ω–∞ {original_day_of_month} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –í–ü–ï–†–Å–î –Ω–∞ {corrected_day} –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ." # noqa: E501
            )
    else:
        corrected_day = original_day_of_month

    return corrected_date


async def send_reminder(bot: Bot, reminder_text: str, task_id: int | None = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not reminder_text:
        return

    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {reminder_text}")

    for user_id in settings.allowed_telegram_ids:
        try:
            await bot.send_message(user_id, reminder_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def perform_auto_transfer(bot: Bot, amount: Decimal, from_envelope_id: int, to_envelope_id: int) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    engine = create_async_engine(str(settings.database_url))
    session_pool = async_sessionmaker(engine, expire_on_commit=False)

    async with session_pool() as session:
        repo = RepoHolder(session)
        env_from = await repo.envelope.get_by_id(from_envelope_id)
        env_to = await repo.envelope.get_by_id(to_envelope_id)

        if not env_from or not env_to:
            logging.error(f"–ù–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤ –¥–ª—è auto_transfer: {from_envelope_id} –∏–ª–∏ {to_envelope_id}")
            return

        logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ auto_transfer: {amount} –∏–∑ '{env_from.name}' –≤ '{env_to.name}'")

        if env_from.balance < amount:
            msg = f"‚ö†Ô∏è **–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ ¬´{env_from.name}¬ª –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {amount:.2f} ‚ÇΩ."  # noqa: E501
        else:
            await repo.transfer.create(from_envelope_id=env_from.id, to_envelope_id=env_to.id, amount=amount)
            await repo.envelope.update(env_from, balance=env_from.balance - amount)
            await repo.envelope.update(env_to, balance=env_to.balance + amount)
            msg = f"ü§ñ **–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!**\n‚úÖ {amount:.2f} ‚ÇΩ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —Å ¬´{env_from.name}¬ª –Ω–∞ ¬´{env_to.name}¬ª."

        for user_id in settings.allowed_telegram_ids:
            try:
                await bot.send_message(user_id, msg, parse_mode="Markdown")
            except Exception as e:
                logging.error(f"Failed to send auto_transfer notification to {user_id}: {e}")

    await engine.dispose()


async def reload_scheduler_jobs(bot: Bot, session_pool: async_sessionmaker):
    global scheduler
    scheduler.remove_all_jobs()

    async with session_pool() as session:
        repo = RepoHolder(session)
        system_state = await repo.state.get_by_id(1)

        if not system_state or not system_state.current_phase_id:
            logging.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–∑. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–µ –ø—É—Å—Ç–æ–π.")
            return

        user = None

        for user_id in settings.allowed_telegram_ids:
            user = await repo.user.get_by_telegram_id(user_id)

            if user:
                break

        try:
            tz = pytz.timezone(user.timezone if user and user.timezone else "UTC")
            scheduler.timezone = tz
            logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–π–º–∑–æ–Ω–∞: {tz}")
        except pytz.UnknownTimeZoneError:
            scheduler.timezone = pytz.utc
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ '{user.timezone}', –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC.")

        tasks = await repo.scheduled_task.get_by_phase_id(system_state.current_phase_id)

        for task in tasks:
            if not task.is_active:
                continue

            job_func, job_kwargs = None, {"bot": bot}
            corrected_day = get_corrected_day(int(task.cron_day), task, tz)

            if task.task_type == "reminder":
                job_func = send_reminder
                job_kwargs["reminder_text"] = task.reminder_text
            elif task.task_type == "auto_transfer":
                job_func = perform_auto_transfer
                job_kwargs.update({
                    "amount": task.amount,
                    "from_envelope_id": task.from_envelope_id,
                    "to_envelope_id": task.to_envelope_id,
                })

            if job_func:
                scheduler.add_job(
                    job_func,
                    trigger="cron",
                    day=corrected_day,
                    hour=int(task.cron_hour),
                    kwargs=job_kwargs,
                    id=f"task_{task.id}",
                )

    active_jobs = scheduler.get_jobs()
    logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Å {len(active_jobs)} –¥–∂–æ–±–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã.")


def start_scheduler():
    global scheduler

    if not scheduler.running:
        scheduler.start()
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
