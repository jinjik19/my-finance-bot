import asyncio
import logging
import random
from datetime import date, timedelta
from decimal import Decimal

from sqlalchemy.ext.asyncio import async_sessionmaker, create_async_engine

from src.core.settings import settings
from src.db.repo_holder import RepoHolder

logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ ---
START_DATE = date(2025, 1, 1)
END_DATE = date.today()


async def generate_data():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logging.info(f"Starting test data generation from {START_DATE} to {END_DATE}...")
    engine = create_async_engine(str(settings.database_url))
    session_pool = async_sessionmaker(engine, expire_on_commit=False)

    async with session_pool() as session:
        repo = RepoHolder(session)

        # --- –ü–æ–ª—É—á–∞–µ–º ID –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π ---
        user1_id, user2_id = settings.allowed_telegram_ids
        user_me = await repo.user.get_by_telegram_id(user1_id)
        user_wife = await repo.user.get_by_telegram_id(user2_id)

        envelopes = {e.name: e for e in await repo.envelope.get_all()}
        categories = {c.name: c for c in await repo.category.get_all()}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        required_envelopes = ["üì• –û–±—â–∏–π –∫–æ—Ç–µ–ª", "üõí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "üéØ –ì–ª–∞–≤–Ω–∞—è –¶–µ–ª—å"]
        required_categories = ["üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", "ü™ô –ê–≤–∞–Ω—Å", "üõí –ü—Ä–æ–¥—É–∫—Ç—ã", "üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]

        if not all(k in envelopes for k in required_envelopes) or \
           not all(k in categories for k in required_categories) or \
           not user_me or not user_wife:
            logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è seed.")
            return

        env_main = envelopes["üì• –û–±—â–∏–π –∫–æ—Ç–µ–ª"]
        env_variable = envelopes["üõí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"]
        env_goal = envelopes["üéØ –ì–ª–∞–≤–Ω–∞—è –¶–µ–ª—å"]

        cat_salary = categories["üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞"]
        cat_avans = categories["ü™ô –ê–≤–∞–Ω—Å"]
        cat_products = categories["üõí –ü—Ä–æ–¥—É–∫—Ç—ã"]
        cat_fun = categories["üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]

        # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –¥–Ω—è–º ---
        logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        current_date = START_DATE
        while current_date <= END_DATE:
            # –î–æ—Ö–æ–¥—ã (—Å–∏–º—É–ª–∏—Ä—É–µ–º –≤–∞—à –ø–ª–∞–Ω)
            if current_date.day == 5:
                await repo.transaction.create(user_id=user_me.id, category_id=cat_avans.id, envelope_id=env_main.id, amount=Decimal("80000"), transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞–Ω—Å")

            if current_date.day == 20:
                await repo.transaction.create(user_id=user_me.id, category_id=cat_salary.id, envelope_id=env_main.id, amount=Decimal("100000"), transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤–∞—è –ó–ü")

            if current_date.day == 10:
                await repo.transaction.create(user_id=user_wife.id, category_id=cat_avans.id, envelope_id=env_main.id, amount=Decimal("30000"), transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤–∞–Ω—Å (–∂–µ–Ω–∞)")

            if current_date.day == 25:
                await repo.transaction.create(user_id=user_wife.id, category_id=cat_salary.id, envelope_id=env_main.id, amount=Decimal("31000"), transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤–∞—è –ó–ü (–∂–µ–Ω–∞)")

            if current_date.day == 6:
                await repo.transfer.create(from_envelope_id=env_main.id, to_envelope_id=env_goal.id, amount=Decimal("32500"))

            if current_date.day == 21:
                await repo.transfer.create(from_envelope_id=env_main.id, to_envelope_id=env_goal.id, amount=Decimal("32500"))

            if current_date.weekday() in [0, 3]: # –ü–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ —á–µ—Ç–≤–µ—Ä–≥–∞–º
                amount = Decimal(random.randint(2500, 4500))
                await repo.transaction.create(user_id=random.choice([user_me.id, user_wife.id]), category_id=cat_products.id, envelope_id=env_variable.id, amount=amount, transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞")

            if current_date.weekday() in [4, 5]: # –ü–æ –ø—è—Ç–Ω–∏—Ü–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º
                amount = Decimal(random.randint(1500, 5000))
                await repo.transaction.create(user_id=random.choice([user_me.id, user_wife.id]), category_id=cat_fun.id, envelope_id=env_variable.id, amount=amount, transaction_date=current_date, comment="–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")

            current_date += timedelta(days=1)

        logging.info("–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤...")
        all_envelopes_list = await repo.envelope.get_all()

        for env in all_envelopes_list:
            total_in = await repo.transaction.get_total_for_envelope_by_type(env.id, 'income')
            total_out = await repo.transaction.get_total_for_envelope_by_type(env.id, 'expense')
            total_transfer_in = await repo.transfer.get_total_to_envelope(env.id)
            total_transfer_out = await repo.transfer.get_total_from_envelope(env.id)

            final_balance = (total_in - total_out) + (total_transfer_in - total_transfer_out)
            await repo.envelope.update(env, balance=final_balance)
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è '{env.name}' –¥–æ {final_balance:.2f} ‚ÇΩ")

    await engine.dispose()
    logging.info("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


if __name__ == "__main__":
    asyncio.run(generate_data())
